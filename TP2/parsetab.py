
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEDIVIDE ENTRADA EQUALS ESCREVER EXCLAMATION_MARK ID LPAREN MINUS NUMBER PLUS QUESTION_MARK RPAREN SEMICOLON TIMESprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : assignment SEMICOLON\n                 | escrever SEMICOLON\n                 | entrada SEMICOLONassignment : ID EQUALS expressionescrever : ESCREVER expressionentrada : ENTRADA LPAREN expression RPARENexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'ID':([0,2,3,8,10,11,12,13,14,16,19,21,22,23,24,],[7,7,-2,18,-3,-4,-5,-6,18,18,18,18,18,18,18,]),'ESCREVER':([0,2,3,10,11,12,13,],[8,8,-2,-3,-4,-5,-6,]),'ENTRADA':([0,2,3,10,11,12,13,],[9,9,-2,-3,-4,-5,-6,]),'$end':([1,2,3,10,11,12,13,],[0,-1,-2,-3,-4,-5,-6,]),'SEMICOLON':([4,5,6,15,17,18,20,27,28,29,30,31,32,],[11,12,13,-8,-15,-16,-7,-10,-11,-12,-13,-14,-9,]),'EQUALS':([7,],[14,]),'LPAREN':([8,9,14,16,19,21,22,23,24,],[16,19,16,16,16,16,16,16,16,]),'NUMBER':([8,14,16,19,21,22,23,24,],[17,17,17,17,17,17,17,17,]),'PLUS':([15,17,18,20,25,26,27,28,29,30,31,],[21,-15,-16,21,21,21,-10,-11,-12,-13,-14,]),'MINUS':([15,17,18,20,25,26,27,28,29,30,31,],[22,-15,-16,22,22,22,-10,-11,-12,-13,-14,]),'TIMES':([15,17,18,20,25,26,27,28,29,30,31,],[23,-15,-16,23,23,23,23,23,-12,-13,-14,]),'DIVIDE':([15,17,18,20,25,26,27,28,29,30,31,],[24,-15,-16,24,24,24,24,24,-12,-13,-14,]),'RPAREN':([17,18,25,26,27,28,29,30,31,],[-15,-16,31,32,-10,-11,-12,-13,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,10,]),'assignment':([0,2,],[4,4,]),'escrever':([0,2,],[5,5,]),'entrada':([0,2,],[6,6,]),'expression':([8,14,16,19,21,22,23,24,],[15,20,25,26,27,28,29,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','reconhecedor_sintatico.py',12),
  ('statement_list -> statement','statement_list',1,'p_statement_list','reconhecedor_sintatico.py',16),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','reconhecedor_sintatico.py',17),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','reconhecedor_sintatico.py',24),
  ('statement -> escrever SEMICOLON','statement',2,'p_statement','reconhecedor_sintatico.py',25),
  ('statement -> entrada SEMICOLON','statement',2,'p_statement','reconhecedor_sintatico.py',26),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','reconhecedor_sintatico.py',30),
  ('escrever -> ESCREVER expression','escrever',2,'p_escrever','reconhecedor_sintatico.py',34),
  ('entrada -> ENTRADA LPAREN expression RPAREN','entrada',4,'p_entrada','reconhecedor_sintatico.py',38),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','reconhecedor_sintatico.py',43),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','reconhecedor_sintatico.py',44),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','reconhecedor_sintatico.py',45),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','reconhecedor_sintatico.py',46),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','reconhecedor_sintatico.py',50),
  ('expression -> NUMBER','expression',1,'p_expression_number','reconhecedor_sintatico.py',54),
  ('expression -> ID','expression',1,'p_expression_id','reconhecedor_sintatico.py',58),
]
